# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    ports:
      - 8000:8000
    image: ispeco:${TAG}
    container_name: ispeco
    environment:
      - DEBUG=False
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - SERVER_EMAIL=${SERVER_EMAIL}
      - ISPECO_SERVER_URL=${ISPECO_SERVER_URL}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - CSRF_COOKIE_SECURE=${CSRF_COOKIE_SECURE}
      - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE}
      - SECURE_SSL_REDIRECT=${SECURE_SSL_REDIRECT}
    secrets:
      - database_url
      - secret_key
      - email_host_password
      - fernet_key
      - superuser_password
    entrypoint: /app/entrypoint.sh
    command: daphne -b 0.0.0.0 -p 8000 ISPECO_Core.asgi:application

secrets:
  database_url:
    file: database_url.txt
  secret_key:
    file: secret_key.txt
  email_host_password:
    file: email_host_password.txt
  fernet_key:
    file: fernet_key.txt
  superuser_password:
    file: superuser_password.txt

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt
